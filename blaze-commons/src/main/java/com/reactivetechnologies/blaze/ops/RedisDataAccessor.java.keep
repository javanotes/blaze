/**
 * Copyright 2016 esutdal

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
package com.reactivetechnologies.blaze.ops;

import java.io.IOException;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.Cache;
import org.springframework.cache.Cache.ValueWrapper;
import org.springframework.cache.CacheManager;
import org.springframework.dao.DataAccessException;
import org.springframework.data.redis.RedisConnectionFailureException;
import org.springframework.data.redis.connection.RedisConnection;
import org.springframework.data.redis.core.BoundListOperations;
import org.springframework.data.redis.core.ListOperations;
import org.springframework.data.redis.core.RedisCallback;
import org.springframework.data.redis.core.RedisOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.SessionCallback;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.reactivetechnologies.blaze.struct.QRecord;
import com.reactivetechnologies.mq.ops.CacheOperations;
import com.reactivetechnologies.mq.ops.ConsumerOperations;
import com.reactivetechnologies.mq.ops.ProducerOperations;

/**
 * @deprecated Use {@linkplain ProducerDataAccessor} 
 * @author esutdal
 *
 */
//@Component
class RedisDataAccessor2 implements CacheOperations, ProducerOperations, ConsumerOperations {

	static final String RPOPLPUSH_DESTN_SUFFIX = "$INPROC";
	public static final String RPOPLPUSH_DESTN_SET = RPOPLPUSH_DESTN_SUFFIX + "-SET";
	public static final String QUEUE_PREFIX = "queues/";
	public static final String QUEUE_PREFIX_PATTERN = QUEUE_PREFIX+"*";
	public static final String STATS_SUFFIX = "$STAT";
	static final String LIST_KEY_JOIN_SEPARATOR = "-";
	static final String INPROC_KEY_JOIN_SEPARATOR = ".";
	
	@Value("${producer.connChecker.period.millis:5000}")
	private long connCheckPeriodMillis = 5;
	@Autowired
	private InstanceInitializationService instanceService;
	private static final Logger log = LoggerFactory.getLogger(RedisDataAccessor.class);
	
	/**
	 * 
	 * @author esutdal
	 *
	 */
	private final class ConnectionCheckerTask implements Runnable
	{
		private ScheduledExecutorService connChecker;
		private long period = 5;
		private TimeUnit unit = TimeUnit.MILLISECONDS;
		public ConnectionCheckerTask() {
			connChecker = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {
				
				@Override
				public Thread newThread(Runnable arg0) {
					Thread t = new Thread(arg0, "Blaze.ConnectionChecker");
					t.setDaemon(true);
					return t;
				}
			});
			log.info("Initiated new connection checker task..");
		}
		@Override
		public void run() {
			if(isRedisAvailable())
			{
				log.info("Redis is up and available now. Running initializations..");
				doInit();
				connChecker.shutdown();
			}
			else
			{
				log.warn("Scheduling next connection check run");
				scheduleNextRun();
			}
		}
		private void scheduleNextRun()
		{
			connChecker.schedule(this, period, unit);
		}
	}
	
	
	/*
	 * Note: On inspecting the Spring template bound*Ops() in Spring code, 
	 * they seem to be plain wrapper classes exposing a subset of operations (restrictive decorator?), 
	 * and passing on the execution to the proxied template class which is a singleton. 
	 * Thus creating large number of such local instances should not be very expensive.
	 * 
	 * This is purely from a theoretical point of view. If profiling suggests otherwise, then caching the
	 * instances can always be considered.
	 */
	@PostConstruct
	private void init()
	{
		
		if(isRedisAvailable())
		{
			log.info("Verified Redis is available..");
			localData = localDataFactory.getObject();
			doInit();
		}
		else
		{
			scheduleConnectionCheck();
		}
	}
	private void moveLocal() {
		localData.moveAll(this);
		log.info("Local queue/s moved to Redis ");
		
	}
	private LocalDataAccessor localData;
	private void scheduleConnectionCheck()
	{
		localData = localDataFactory.getObject();
		new ConnectionCheckerTask().scheduleNextRun();
	}
	private final AtomicBoolean initReady = new AtomicBoolean();
	private void doInit()
	{
		instanceService.verifyInstanceId();
		loadQueueNames();
		initReady.compareAndSet(false, true);
		moveLocal();
	}
	/* (non-Javadoc)
	 * @see com.reactivetechnologies.blaze.ops.BaseOperations#isRedisAvailable()
	 */
	@Override
	public boolean isRedisAvailable()
	{
		try {
			RedisConnection conn = stringRedis.getConnectionFactory().getConnection();
			conn.close();//return to pool
			return true;
		} catch (RedisConnectionFailureException e) {
			log.error("* Redis is unavailable * Root cause => "+ e.getMostSpecificCause().getMessage());
			log.error("Full stacktrace provided in debug log");
			log.debug("", e);
		}
		return false;
	}
	
	/*private void persistQueueName(String name) {
		if(!queueNames.contains(name))
		{
			synchronized (queueNames) {
				if(!queueNames.contains(name))
				{
					instanceService.persistListKeys(new HashSet<>(Arrays.asList(name)));
					queueNames.add(name);
				}
			}
		}
	}*/

	
	@PreDestroy
	private void destroy()
	{
		instanceService.removeInstanceId();
		instanceService.persistQueueNames(findQueueNames());
		if(localData.isOpen())
			try {
				localData.close();
			} catch (IOException e) {
				
			}
	}
	
	private void loadQueueNames() {
		Set<String> qNames = findQueueNames();
		queueNames.addAll(qNames);
	}
	/* (non-Javadoc)
	 * @see com.reactivetechnologies.blaze.ops.BaseOperations#getServerInfo()
	 */
	@Override
	public Properties getServerInfo()
	{
		return redisTemplate.execute(new RedisCallback<Properties>() {

			@Override
			public Properties doInRedis(RedisConnection connection) throws DataAccessException {
				return connection.info("all");
			}
		});
	}
	//TODO: Fetching queue names. Not being able to PERSIST
	/* (non-Javadoc)
	 * @see com.reactivetechnologies.blaze.ops.BaseOperations#findQueueNames()
	 */
	@Override
	public Set<String> findQueueNames()
	{
		Set<String> qList = redisTemplate.keys(QUEUE_PREFIX_PATTERN);
		for(Iterator<String> iter = qList.iterator(); iter.hasNext();)
		{
			String qName = iter.next();
			if(qName.contains(RPOPLPUSH_DESTN_SUFFIX) || qName.contains(STATS_SUFFIX))
			{
				iter.remove();
			}
		}
		return qList;
	}
	
	/* (non-Javadoc)
	 * @see com.reactivetechnologies.blaze.ops.ConsumerOperations#endCommit(com.reactivetechnologies.blaze.struct.QRecord, java.lang.String, boolean)
	 */
	@Override
	public void endCommit(QRecord qr, String key, boolean enqueueAgain) {
		List<Object> results = redisTemplate.execute(new SessionCallback<List<Object>>() {

			@Override
			public <K, V> List<Object> execute(RedisOperations<K, V> operations) throws DataAccessException {
				operations.multi();
				
				//TODO: Verify if this is indeed being executed in a MULTI correctly
				
				//ListOperations<K, V> listOps = operations.opsForList();
				
				//listOps.remove((K) prepareInProcKey(key), -1, qr.getRedeliveryCount() > 0 ? qr.decrDeliveryCount() : qr);
				
				//the QRecord has been incremented now. So to make the 'remove'
				//operation fire, we will decrement the count to make it equal
				//to the state saved in the inproc queue
				redisTemplate.boundListOps(prepareInProcKey(key)).remove(-1,
						qr.getRedeliveryCount() > 0 ? qr.decrDeliveryCount() : qr);
				
				if(enqueueAgain)
				{
					redisTemplate.boundListOps(key).rightPush(qr);
					
					//listOps.rightPush((K) key, (V) qr);
				}
				else
				{
					//dequeue is complete now
					statsRecorder.recordDequeu(key);
				}
				return operations.exec();
			}
			
		});
		//LREM count < 0: Remove elements equal to value moving from tail to head.
		//since we are pushing from left, the item will be moving towards tail. this operation
		//has a complexity of O(N), so we should try to minimize N
		long c = (long) results.get(0);
		if (c != 1) {
			log.warn("Message was not removed from inproc on endCommit. count="+c);
		}
	}
	
	/* (non-Javadoc)
	 * @see com.reactivetechnologies.blaze.ops.ProducerOperations#enqueue(java.lang.String, com.reactivetechnologies.blaze.struct.QRecord)
	 */
	@Override
	public void enqueue(String preparedKey, QRecord...values) {
		log.debug("enqueue: LPUSH "+preparedKey);
		try 
		{
			if (initReady.get()) {
				lpushAll(preparedKey, values);
			}
			else
			{
				enqueueLocally(preparedKey, values);
			}
		} 
		catch (RedisConnectionFailureException e) {
			log.error("", e);
			if(initReady.compareAndSet(true, false))
				scheduleConnectionCheck();
			
			enqueueLocally(preparedKey, values);
			//handle again?
		}
	}
	private void enqueueLocally(String preparedKey, QRecord...values)
	{
		log.warn("Redis is unavailable. Will queue it locally");
		localData.addAll(preparedKey, values);
	}
	/**
	 * 
	 * @param preparedKey
	 * @param values
	 */
	public void lpushAll(String preparedKey, QRecord[]values)
	{
		BoundListOperations<String, QRecord> listOps = redisTemplate.boundListOps(preparedKey);
		long c = listOps.leftPushAll(values);
		statsRecorder.recordEnqueu(preparedKey, c);
	}
	@Autowired
	private LocalDataAccessorFactoryBean localDataFactory;
	private final Set<String> queueNames = new HashSet<>();
	
	//NOTE: Redis keys are data structure specific. So you cannot use the same key for hash and list.
	/**
	 * Prepare a list key based on the exchange and route information. Presently it is
	 * simply appended.
	 * @param exchange
	 * @param key
	 * @return
	 */
	public String prepareListKey(String exchange, String key)
	{
		String name = new StringBuilder(QUEUE_PREFIX).append(exchange).append(LIST_KEY_JOIN_SEPARATOR).append(key).toString();
		//persistQueueName(name);
		return name;
	}
	/**
	 * Prepare the key for the surrogate SINK queue.
	 * @param exchange
	 * @param key
	 * @return
	 */
	public String prepareInProcKey(String exchange, String key)
	{
		String preparedKey = prepareListKey(exchange, key);
		return prepareInProcKey(preparedKey);
	}
	
	/**
	 * 
	 * @param preparedKey
	 * @return
	 */
	private String prepareInProcKey(String preparedKey)
	{
		return preparedKey + RPOPLPUSH_DESTN_SUFFIX + INPROC_KEY_JOIN_SEPARATOR + instanceService.getInstanceId();
	}
	@Autowired StringRedisTemplate stringRedis;
	@Autowired BlazeRedisTemplate redisTemplate;
	@Autowired
	private RedisStatsRecorder statsRecorder;
	/* (non-Javadoc)
	 * @see com.reactivetechnologies.blaze.ops.ConsumerOperations#dequeue(java.lang.String, java.lang.String, long, java.util.concurrent.TimeUnit)
	 */
	@Override
	public QRecord dequeue(String xchng, String route, long await, TimeUnit unit) 
	{
		log.debug(">>>>>>>>>> Start fetchHead <<<<<<<<< ");
		log.debug("route -> " + route + "\tawait: " + await + " unit: " + unit);
		String preparedKey = prepareListKey(xchng, route);
		String inprocKey = prepareInProcKey(preparedKey);
		
		log.debug("dequeue: RPOP "+preparedKey+" LPUSH "+inprocKey);
		return redisTemplate.opsForList().rightPopAndLeftPush(preparedKey, inprocKey, await, unit);
	}
	/* (non-Javadoc)
	 * @see com.reactivetechnologies.blaze.ops.ConsumerOperations#pop(java.lang.String, java.lang.String, long, java.util.concurrent.TimeUnit)
	 */
	@Override
	public QRecord pop(String xchng, String route, long await, TimeUnit unit)
	{
		String preparedKey = prepareListKey(xchng, route);
		QRecord qr =  redisTemplate.opsForList().rightPop(preparedKey, await, unit);
		if(qr != null)
		{
			statsRecorder.recordDequeu(preparedKey);
		}
		return qr;
		
	}
	
	/**
	 * Wrapper on {@linkplain RedisTemplate}.
	 * @param prepareKey
	 * @return
	 */
	@Override
	public BoundListOperations<String, QRecord> boundListOps(String prepareKey) {
		return redisTemplate.boundListOps(prepareKey);
	}
	/**
	 * Wrapper on {@linkplain RedisTemplate}.
	 * @param redisCallback
	 */
	@Override
	public void executePipelined(RedisCallback<Integer> redisCallback) {
		redisTemplate.executePipelined(redisCallback);
	}
	/* (non-Javadoc)
	 * @see com.reactivetechnologies.blaze.ops.BaseOperations#clear(java.lang.String, java.lang.String)
	 */
	@Override
	public boolean clear(String xchangeKey, String routeKey)
	{
		final String listKey = prepareListKey(xchangeKey, routeKey);

		//it is better to run clear in pipeline for faster execution
		//anyway we return a boolean to confirm
		//so clients higher up can do a compare and set type operation.
		List<Object> removed = invokeClearInPipeline(listKey);
		
		log.debug("Removed items: "+removed);
		log.info("Removed items count: "+removed.size());
		return sizeOf(listKey) == 0;
	}
	
	private List<Object> invokeClearInPipeline(final String listKey)
	{
		StringRedisSerializer ser = (StringRedisSerializer) redisTemplate.getKeySerializer();
		final byte[] keyBytes = ser.serialize(listKey);
		final long llen = sizeOf(listKey);
		return redisTemplate.executePipelined(new RedisCallback<Void>() {

			@Override
			public Void doInRedis(RedisConnection connection) throws DataAccessException {
				if (llen > 0) {
					for (long l = 0; l < llen; l++) {
						connection.rPop(keyBytes);
					}
				}
				return null;
			}
		});
	}
	private List<Object> invokeClearInTransaction(final String listKey)
	{
		
		return redisTemplate.execute(new SessionCallback<List<Object>>() {

			@SuppressWarnings("unchecked")
			@Override
			public <K, V> List<Object> execute(RedisOperations<K,V> operations) throws DataAccessException {
				try {
					long llen = sizeOf(listKey);
					if (llen > 0) {
						ListOperations<K, V> ops = operations.opsForList();
						operations.multi();
						for (long l = 0; l < llen; l++) {
							ops.rightPop((K) listKey);
						}
						return operations.exec();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				
				return Collections.emptyList();
			}
		});
	}
	/**
	 * Clear the inproc queue
	 * @param xchangeKey
	 * @param routeKey
	 * @return
	 */
	@Override
	public boolean clearInproc(String xchangeKey, String routeKey)
	{
		final String listKey = prepareInProcKey(xchangeKey, routeKey);

		List<Object> removed = invokeClearInTransaction(listKey);
		log.debug("Removed items: "+removed);
		log.info("Removed items count: "+removed.size());
		return sizeOf(listKey) == 0;
	}
	/**
	 * Wrapper on {@linkplain RedisTemplate}.
	 * @return
	 */
	@Override
	public StringRedisSerializer getKeySerializer() {
		return (StringRedisSerializer) redisTemplate.getKeySerializer();
	}
	@Autowired
	private CacheManager cacheMgr;
	
	private ObjectMapper om = new ObjectMapper();
	/* (non-Javadoc)
	 * @see com.reactivetechnologies.blaze.ops.CacheOperations#put(java.lang.String, K, V)
	 */
	@Override
	public <V, K> void put(String cache, K key, V value)
	{
		Cache c = cacheMgr.getCache(cache);
		ObjectWriter ow = om.writer();
		try {
			c.put(ow.writeValueAsString(key), ow.writeValueAsString(value));
		} catch (JsonProcessingException e) {
			throw new IllegalArgumentException(e);
		}
	}
	/* (non-Javadoc)
	 * @see com.reactivetechnologies.blaze.ops.CacheOperations#get(java.lang.String, K)
	 */
	@Override
	public <V, K> V get(String cache, K key)
	{
		Cache c = cacheMgr.getCache(cache);
		ObjectReader or = om.reader();
		ObjectWriter ow = om.writer();
		try {
			ValueWrapper vw = c.get(ow.writeValueAsString(key));
			if(vw.get() != null)
			{
				return or.readValue(vw.get().toString());
			}
		} catch (IOException e) {
			throw new IllegalArgumentException(e);
		}
		return null;
	}
	
	/* (non-Javadoc)
	 * @see com.reactivetechnologies.blaze.ops.BaseOperations#sizeOf(java.lang.String)
	 */
	@Override
	public Long sizeOf(String listKey) {
		return redisTemplate.boundListOps(listKey).size();
	}
	/* (non-Javadoc)
	 * @see com.reactivetechnologies.blaze.ops.ConsumerOperations#reverseDequeue(java.lang.String, java.lang.String)
	 */
	@Override
	public boolean reverseDequeue(String xchng, String route) {
		String preparedKey = prepareListKey(xchng, route);
		String inprocKey = prepareInProcKey(preparedKey);
		log.info("reverseDequeue: RPOP "+inprocKey+" LPUSH "+preparedKey);
		QRecord qr = redisTemplate.opsForList().rightPopAndLeftPush(inprocKey, preparedKey);
		return qr != null;
	}
	public boolean isInitReady() {
		return initReady.get();
	}
	
}
